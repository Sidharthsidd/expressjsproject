✅ What is Express and why should we use it?

- Express is a minimal Node.js framework that provides a higher level of abstraction.
- Express contains a robust set of features like complex routing, easier handling of requests and responses, middleware, server-side rendering, etc.
- Express allows for rapid development of Node.js applications — we don’t have to reinvent the wheel.
- Express makes it easier to organize our applications into the MVC (Model-View-Controller) architecture.

✅ Postman

Postman is a tool that allows us to test APIs.

✅ app.get()

- A method provided by Express to define a route for handling HTTP GET requests.
- Takes two parameters: the path (e.g., "/") and a callback function (handler) that defines the response.

✅ res.status(200)

- Sets the HTTP status code of the response to 200, meaning "OK."
- Other common status codes: 404 (Not Found), 500 (Internal Server Error), etc.

✅ res.json()

- Sends the response back in JSON format.

✅ What is an API?

API (Application Programming Interface) is a piece of software that can be used by another piece of software to allow applications to communicate with each other.

Flow: Database → JSON → API → Browser

✅ REST (Representational State Transfer)

Principles for creating REST APIs:
1. Separate the API into logical resources.
2. Expose structured, resource-based URLs.
3. Use HTTP methods (verbs).
4. Send data as JSON (usually).
5. Be stateless.

✅ HTTP Methods

- GET: Retrieve data from the server without modifying it.
- POST: Send data to the server to create a new resource.
- PUT: Update an entire resource on the server.
- PATCH: Update part of an existing resource.
- DELETE: Delete a resource from the server.

✅ Sending JSON data to the client

res.status(200).json({           
    status: 'success',
    results: tours.length,
    data: {
        tours: tours
    }
})

- status: 'success' → Indicates the request was successful.
- results: tours.length → Number of tour records.
- data: { tours: tours } → Payload containing the tours array.

✅ POST request

- Add middleware to parse JSON before the POST request:

app.use(express.json())

- Example POST route:

app.post("/api/v1/tours", (req, res) => {
    const newId = tours[tours.length - 1].id + 1;
    const newTour = Object.assign({ id: newId }, req.body);
    tours.push(newTour);
    fs.writeFile(`${__dirname}/dev-data/data/tours-simple.json`, JSON.stringify(tours), err => {
        res.status(201).json({
            status: 'success',
            data: { tour: newTour }
        });
    });
});

✅ Generating and responding with URL parameters

app.get("/api/v1/tours/:id/:v5?")

- Use a colon (:) followed by the parameter name.
- The question mark (?) makes the parameter optional.

✅ Handling PATCH requests

- PUT → Update the entire resource.
- PATCH → Update part of the resource.

✅ Handling DELETE requests

res.status(204).json({
    status: 'success',
    data: null
});

- 204 means "No Content" — don’t send any data back.

✅ Organizing routes

- If the route is the same for multiple operations, use the route() function to group methods like GET, POST, PATCH, DELETE.
