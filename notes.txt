what is express and why should we use it ?
**express is a minimal node,js framework a higher level of abstraction 
**express contains a very robust set of features complex routing  easier 
  handling of requests adn respoonses middleware serverside redering etc .
**express allows for rapid development of node.js applications we dont have to re-invent the wheel 
**express make it easier to organies our applications into the MVC architecture 


postman is the tool that alllows us to test apis 
///
app.get():
This is a method provided by Express (a web framework for Node.js) to define a route for handling HTTP GET requests.
It takes two parameters: the path ("/" in this case) and a callback function (or handler) that defines the response.
//
res.status(200):
This sets the HTTP status code of the response to 200, which means "OK."
Other common status codes include 404 (Not Found), 500 (Internal Server Error), etc.

//res.json to response in json format 


what is  the api :
application programming interface a piece of software that can be sued by anouther piece of sofwware in order to allow applications to talk to each other 

database=>json=>api=>browsers

REST=represental state transfer 
couple of prijnciples to create a rest apis 
1. separate api into logical  resource
2.expose structures resource based urls 
3.use httpp methods (verbs)
4.send data as json (usally)
5.be stateless 


HTTP Methods //

get:Used to retrieve data from a server without modifying it.
post :Used to send data to the server to create a new resource
put:Used to update an entire resource on the server with new data
patch:Used to update part of an existing resource.
delete:Used to delete a resource from the server.

sending the data of json file to the client
 res.status(200).json({           
        status:'success',
        results:tours.length,
        data:{
            tours:tours,       //tours the value is set as specified when the file is synced by readfilesync
        }})

{ status: 'success' }=>
The key status is used to give clients a quick indication of whether the request was successful or encountered an error.
In this case, 'success' implies that the operation completed successfully.

results: tours.length 
results specifies the number of tour records available.

tours.length=> gives the number of items in the tours array, so results holds the count of tours
data is the main container object for the responseâ€™s payload.

Inside data, we have { tours: tours }, where=>
tours on the left side of the colon is the key that the client will see, making it clear that this part of the response contains a list of tours.
tours on the right side is the actual array of tour data.


////////////////POST REQUEST ////////////
add middle ware before the post request is made 

app.use(express.json())
This is useful for logging requests, debugging, or handling common tasks before requests reach your routes.
app.post("/api/v1/tours",(req,res)=>{
        // console.log(req.body);
        const newId =tours[tours.length-1].id+1;
        const newTour =Object.assign({id:newId},req.body);
        tours.push(newTour)
        fs.writeFile(`${__dirname}/dev-data/data/tours-simple.json`,JSON.stringify(tours),err=>{res.status(201).json({status:'success',data:{tour:newTour}})})
        
});

/////generating parameters and reponeding the parameters from url ///////////


app.get("/api/v1/tours/:id/:v5?)  //we write url params by spesifing colon : and any variable or umber after that
question mark is the optional  purpore which specifys that it can be added or can be ignored 

////handling patch requests////

put is used when entire data is updated patch is used when some data items is to  be updated

////handling delete requests////
res.status(204).json is use 204 for the status for delete wwe dont send any data back just set it to null

//to make the code better and understanding we make the code by making const and add that i the variable 

///if the route is same for some operations then we sue the route funtion to specify the operation get ,post or patch ,delete ,

